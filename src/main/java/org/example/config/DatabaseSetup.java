// Pacote: org.example.config
package org.example.config;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

public class DatabaseSetup {

    /**
     * Inicializa o esquema do banco de dados.
     * Remove tabelas existentes (se houver) e cria as novas.
     * Ideal para ser chamado no início da aplicação ou antes de testes.
     *
     * @throws SQLException se ocorrer um erro durante o setup.
     */
    public static void initializeDatabase() throws SQLException {
        String sqlDropMotos = "DROP TABLE IF EXISTS motos CASCADE;";
        String sqlDropCarros = "DROP TABLE IF EXISTS carros CASCADE;";
        String sqlDropVeiculos = "DROP TABLE IF EXISTS veiculos CASCADE;"; // CASCADE para remover dependências

        String sqlCreateVeiculos = "CREATE TABLE veiculos (" +
                "    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                "    modelo VARCHAR(100) NOT NULL," +
                "    fabricante VARCHAR(100) NOT NULL," +
                "    ano_fabricacao INT NOT NULL," +
                "    preco NUMERIC(12, 2) NOT NULL," +
                "    tipo_veiculo VARCHAR(10) NOT NULL," +
                "    CONSTRAINT chk_tipo_veiculo CHECK (tipo_veiculo IN ('CARRO', 'MOTO'))," +
                "    CONSTRAINT chk_ano_fabricacao CHECK (ano_fabricacao > 1900 AND ano_fabricacao < 2100)," +
                "    CONSTRAINT chk_preco CHECK (preco > 0)" +
                ");";

        String sqlCreateCarros = "CREATE TABLE carros (" +
                "    id_veiculo INT PRIMARY KEY," +
                "    quantidade_portas INT NOT NULL," +
                "    tipo_combustivel VARCHAR(20) NOT NULL," +
                "    CONSTRAINT fk_carro_veiculo FOREIGN KEY (id_veiculo) REFERENCES veiculos(id) ON DELETE CASCADE," +
                "    CONSTRAINT chk_quantidade_portas CHECK (quantidade_portas > 0 AND quantidade_portas < 10)," +
                "    CONSTRAINT chk_tipo_combustivel CHECK (tipo_combustivel IN ('GASOLINA', 'ETANOL', 'DIESEL', 'FLEX'))" +
                ");";

        String sqlCreateMotos = "CREATE TABLE motos (" +
                "    id_veiculo INT PRIMARY KEY," +
                "    cilindradas INT NOT NULL," +
                "    CONSTRAINT fk_moto_veiculo FOREIGN KEY (id_veiculo) REFERENCES veiculos(id) ON DELETE CASCADE," +
                "    CONSTRAINT chk_cilindradas CHECK (cilindradas > 0)" +
                ");";

        String sqlCreateIndexTipo = "CREATE INDEX IF NOT EXISTS idx_veiculos_tipo ON veiculos(tipo_veiculo);";
        String sqlCreateIndexModelo = "CREATE INDEX IF NOT EXISTS idx_veiculos_modelo ON veiculos(modelo);";
        String sqlCreateIndexFabricante = "CREATE INDEX IF NOT EXISTS idx_veiculos_fabricante ON veiculos(fabricante);";
        String sqlCreateIndexAno = "CREATE INDEX IF NOT EXISTS idx_veiculos_ano ON veiculos(ano_fabricacao);";

        System.out.println("--- Iniciando Setup do Banco de Dados (Recriação de Tabelas) ---");
        try (Connection conn = ConnectionFactory.getConnection(); // Usa a ConnectionFactory para obter a conexão
             Statement stmt = conn.createStatement()) {

            System.out.println("  Executando DROP para motos, carros, veiculos...");
            stmt.execute(sqlDropMotos);
            stmt.execute(sqlDropCarros);
            stmt.execute(sqlDropVeiculos);
            System.out.println("  Tabelas antigas (se existiam) removidas.");

            System.out.println("  Executando CREATE TABLE veiculos...");
            stmt.execute(sqlCreateVeiculos);
            System.out.println("  Tabela 'veiculos' criada.");

            System.out.println("  Executando CREATE TABLE carros...");
            stmt.execute(sqlCreateCarros);
            System.out.println("  Tabela 'carros' criada.");

            System.out.println("  Executando CREATE TABLE motos...");
            stmt.execute(sqlCreateMotos);
            System.out.println("  Tabela 'motos' criada.");

            System.out.println("  Criando índices...");
            stmt.execute(sqlCreateIndexTipo);
            stmt.execute(sqlCreateIndexModelo);
            stmt.execute(sqlCreateIndexFabricante);
            stmt.execute(sqlCreateIndexAno);
            System.out.println("  Índices criados/verificados.");

            System.out.println("--- Setup do Banco de Dados Concluído com Sucesso ---");

        } catch (SQLException e) {
            System.err.println("!!! ERRO DURANTE O SETUP DO BANCO DE DADOS !!!");
            System.err.println("  Mensagem: " + e.getMessage());
            e.printStackTrace();
            throw e; // Relança a exceção para que o chamador saiba que falhou
        }
    }

    /**
     * Método main para testar o setup do banco de dados de forma isolada.
     */
    public static void main(String[] args) {
        try {
            // Certifique-se que o BANCO DE DADOS 'empresaxwz_db' existe antes de rodar.
            // Este método vai criar/recriar as TABELAS dentro dele.
            DatabaseSetup.initializeDatabase();
        } catch (SQLException e) {
            System.err.println("Falha ao inicializar o banco de dados a partir do main de DatabaseSetup.");
            // A exceção já foi impressa dentro de initializeDatabase
        }
    }
}